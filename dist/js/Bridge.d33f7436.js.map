{"version":3,"sources":["webpack:///./src/views/Bridge.vue","webpack:///./src/constant/Chain.js","webpack:///./src/constant/Bridge.js","webpack:///./src/state/bridge/Contract.js","webpack:///./src/state/bridge/Multicall.js","webpack:///./src/state/bridge/index.js","webpack:///./src/views/Bridge.vue?5f7d"],"names":["class","_createElementVNode","_createElementBlock","_toDisplayString","$setup","_createVNode","_component_el_button","type","plain","onClick","_hoisted_3","_component_el_card","chain","_hoisted_5","_component_el_link","target","href","name","_component_el_icon","_component_Link","contractBalance","token","decimals","_hoisted_7","_hoisted_9","_hoisted_10","_hoisted_12","_component_el_input","style","chainAToBTokenAmount","$event","placeholder","oninput","disabled","tokenBalance","_hoisted_15","chainBToATokenAmount","bnbTestnet","chainId","rpcUrl","currencySymbol","blockExplorerUrl","sepoliaTestnet","ethereumMainnet","BRIDGE_CONTRACT_ADDRESS","CHAIN","MULTICALL_ADDRESS","MULTICALL_ABI","MULTICALL_BNB_TESTNET","RPC_URL","TOKENS","usdt","Token","address","getMulticallAbi","getMulticallAddress","getRpcProvider","simpleRpcProvider","StaticJsonRpcProvider","getContract","abi","signer","signerOrProvider","Contract","getMulticallContract","multicall","calls","multi","itf","Interface","calldata","map","call","toLowerCase","callData","encodeFunctionData","params","aggregate","returnData","res","i","decodeFunctionResult","getTokenBalance","account","erc20ABI","rawTokenBalances","parsedTokenBalances","BigNumber","toJSON","console","log","message","SELECT_TOKEN","FEE","components","Link","setup","Web3Connect","useWeb3Connect","network","chainA","reactive","web3","chainB","form","isOnBriding","ref","tokenSymbol","computed","isTestnet","chainAContractUrl","chainBContractUrl","aToBInputError","inputError","aToBInputValid","inputValid","value","bToAInputError","bToAInputValid","pairChain","inputAmount","id","amountToBride","TokenAmount","parseUnits","amountBalance","destinationContractTokenAmount","lessThan","parseFloat","fetchTokenInfo","balances","balance","fetchAll","Promise","all","tokenAInfo","tokenBInfo","contractAInfo","contractBInfo","bridgeAToB","briding","bridgeBToA","primaryChain","_amount","transactionHash","fullScreenLoading","ElLoading","service","lock","text","background","getWeb3","erc20Contract","eth","to","amount","tx","methods","transfer","estimateGas","from","estimatedGas","gasPrice","useGasPrice","send","gas","on","_transactionHash","ElNotification","customClass","title","dangerouslyUseHTMLString","viewTransactionOnBlockExplorer","duration","setTimeout","clearForm","close","error","contractErrorExtract","refresh","onMounted","tokenBalanceFormat","__exports__","render"],"mappings":"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","file":"js/Bridge.d33f7436.js","sourcesContent":["<template>\n    <div class=\"Bridge\">\n        \n        <h1>\n            {{ tokenSymbol }} Bridge\n        </h1>\n        <div>\n            <el-button type=\"primary\" plain @click=\"refresh\">Refresh</el-button>\n        </div>\n        <br>\n        <div>\n            <el-card>\n                <div class=\"flex justify-content-space-around\">\n                    <div v-if=\"chainA.chain\">\n                        <div class=\"text-bold\">\n                            <el-link type=\"primary\" target=\"_blank\" :href=\"chainAContractUrl\">\n                                {{ chainA.chain.name }} Bridge Contract \n                                &nbsp;<el-icon><Link /></el-icon>\n                            </el-link>\n                        </div>\n                        <div>\n                            {{ tokenBalanceFormat(chainA.contractBalance, chainA.token.decimals, 5) }} {{ tokenSymbol }}\n                        </div>\n                    </div>\n                    <div v-if=\"chainB.chain\">\n                        <div class=\"text-bold\">\n                            <el-link type=\"primary\" target=\"_blank\" :href=\"chainBContractUrl\">\n                                {{ chainB.chain.name }} Bridge Contract\n                                &nbsp;<el-icon><Link /></el-icon>\n                            </el-link>\n                        </div>\n                        <div>\n                            {{ tokenBalanceFormat(chainB.contractBalance, chainB.token.decimals, 5) }} {{ tokenSymbol }}\n                        </div>\n                    </div>\n                    <div>\n                        <div class=\"text-bold\">\n                            Bridging Fee\n                        </div>\n                        <div>\n                            {{ FEE }} {{ tokenSymbol }}/TX\n                        </div>\n                    </div>\n                </div>\n                \n            </el-card>\n        </div>\n        <br>\n        <div class=\"flex justify-content-space-around\">\n            <el-card>\n                <div v-if=\"chainA.chain\">\n                    <div>\n                        {{ chainA.chain.name }}\n                    </div>\n                    <div class=\"flex\">\n                        <el-input \n                        style=\"width: 200px;\" \n                        v-model=\"form.chainAToBTokenAmount\" \n                        placeholder=\"0.0\" \n                        oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"></el-input>\n                        <el-button type=\"primary\"\n                        :disabled=\"!aToBInputValid\"\n                        @click=\"bridgeAToB\">\n                            Bridge to {{ chainB.chain.name }} \n                        </el-button>\n                    </div>\n                    <div v-if=\"aToBInputError\" class=\"text-red\">\n                        {{ aToBInputError }}\n                    </div>\n                    <div>\n                        Balance: \n                        {{ tokenBalanceFormat(chainA.tokenBalance, chainA.token.decimals, 5) }} \n                        {{ tokenSymbol }}\n                    </div>\n                </div>\n            </el-card>\n            <el-card>\n                <div v-if=\"chainB.chain\">\n                    <div>\n                        {{ chainB.chain.name }}\n                    </div>\n                    <div class=\"flex\">\n                        <el-input \n                        style=\"width: 200px;\" \n                        v-model=\"form.chainBToATokenAmount\" \n                        placeholder=\"0.0\" \n                        oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"></el-input>\n                        <el-button type=\"primary\"\n                        :disabled=\"!bToAInputValid\"\n                        @click=\"bridgeBToA\">\n                            Bridge to {{ chainA.chain.name }} \n                        </el-button>\n                    </div>\n                    <div v-if=\"bToAInputError\" class=\"text-red\">\n                        {{ bToAInputError }}\n                    </div>\n                    <div>\n                        Balance: \n                        {{ tokenBalanceFormat(chainB.tokenBalance, chainB.token.decimals, 5) }} \n                        {{ tokenSymbol }}\n                    </div>\n                </div>\n            </el-card>\n        </div>\n    </div>\n</template>\n<script>\n\nimport { getTokenBalance } from '@/state/bridge'\nimport useWeb3Connect from '@/use/Web3Connect'\nimport { onMounted, reactive, computed, ref } from 'vue'\nimport CHAIN from '@/constant/Chain'\nimport { TOKENS, BRIDGE_CONTRACT_ADDRESS, BRIDGING_ROUTE } from '@/constant/Bridge.js'\nimport { tokenBalanceFormat } from '@/utils/formatBalance'\nimport { isTestnet } from '@/constant/config/Env'\nimport { Link } from '@element-plus/icons-vue'\nimport { TokenAmount } from '@pancakeswap/sdk'\nimport { parseUnits } from '@ethersproject/units'\nimport erc20ABI from '@/constant/abi/ERC20.json'\nimport { useGasPrice } from '@/state/user/hook'\nimport contractErrorExtract from '@/lib/contractErrorExtract.js'\nimport { ElNotification, ElLoading } from 'element-plus'\n\nconst SELECT_TOKEN = 'usdt'\nconst FEE = '0.01'\n\nexport default {\n    components: {\n        Link,\n    },\n    setup() {\n\n        const Web3Connect = useWeb3Connect()\n        const account = Web3Connect.account\n        const network = Web3Connect.network\n\n        const chainA = reactive({\n            chain: null,\n            token: null,\n            tokenBalance: 0,\n            contractBalance: 0,\n            web3: null,\n        })\n\n        const chainB = reactive({\n            chain: null,\n            token: null,\n            tokenBalance: 0,\n            contractBalance: 0,\n            web3: null,\n        })\n\n        const form = reactive({\n            chainAToBTokenAmount: '',\n            chainBToATokenAmount: '',\n        })\n\n        const isOnBriding = ref(false)\n\n        const tokenSymbol = computed(() => {\n            return isTestnet ? 'BIRD' : 'USDT'\n        })\n        const chainAContractUrl = computed(() => {\n            return `${chainA.chain.blockExplorerUrl}/address/${BRIDGE_CONTRACT_ADDRESS[chainA.chain.chainId]}`\n        })\n        const chainBContractUrl = computed(() => {\n            return `${chainB.chain.blockExplorerUrl}/address/${BRIDGE_CONTRACT_ADDRESS[chainB.chain.chainId]}`\n        })\n\n        const aToBInputError = computed(() => {\n            return inputError(chainA, chainB, form.chainAToBTokenAmount)\n        })\n        const aToBInputValid = computed(() => {\n            return inputValid(form.chainAToBTokenAmount, aToBInputError.value)\n        })\n        const bToAInputError = computed(() => {\n            return inputError(chainB, chainA, form.chainBToATokenAmount)\n        })\n        const bToAInputValid = computed(() => {\n            return inputValid(form.chainBToATokenAmount, bToAInputError.value)\n        })\n        \n        const inputError = (chain, pairChain, inputAmount) => {\n            if(!inputAmount) {\n                return ''\n            }\n            if(!network.value) {\n                return ''\n            }\n            if(network.value.id !== chain.chain.chainId) {\n                return `Change network to ${chain.chain.name}`\n            }\n\n            const amountToBride = new TokenAmount(chain.token, parseUnits(inputAmount, chain.token.decimals))\n            const amountBalance = new TokenAmount(chain.token, chain.tokenBalance)\n            const destinationContractTokenAmount = new TokenAmount(chain.token, pairChain.contractBalance)\n            if(amountBalance.lessThan(amountToBride)) {\n                return `Insufficient ${tokenSymbol.value} balance`\n            }\n            if(destinationContractTokenAmount.lessThan(amountToBride)) {\n                return `Insufficient ${tokenSymbol.value} balance on ${pairChain.chain.name} smart contract`\n            }\n            return ''\n        }\n\n        const inputValid = (inputAmount, inputError) => {\n            if(!network.value) {\n                return ''\n            }\n            if(!inputAmount) {\n                return false\n            }\n            if(parseFloat(inputAmount) <= 0) {\n                return false\n            }\n            if(inputError) {\n                return false\n            }\n            return true\n        }\n\n        const fetchTokenInfo = async (chainId, token, account) => {\n            const balances = await getTokenBalance(chainId, token.address, account)\n            const balance = balances[0]\n            return {\n                balance,\n            }\n        }\n\n        const fetchAll = async () => {\n\n            if(!chainA.chain || !chainB.chain) {\n                return\n            }\n\n            const [tokenAInfo, tokenBInfo, contractAInfo, contractBInfo] = await Promise.all([\n                fetchTokenInfo(chainA.chain.chainId, chainA.token, account.value.address),\n                fetchTokenInfo(chainB.chain.chainId, chainB.token, account.value.address),\n                fetchTokenInfo(chainA.chain.chainId, chainA.token, BRIDGE_CONTRACT_ADDRESS[chainA.chain.chainId]),\n                fetchTokenInfo(chainB.chain.chainId, chainB.token, BRIDGE_CONTRACT_ADDRESS[chainB.chain.chainId]),\n            ])\n\n            chainA.tokenBalance = tokenAInfo.balance\n            chainA.contractBalance = contractAInfo.balance\n            chainB.tokenBalance = tokenBInfo.balance\n            chainB.contractBalance = contractBInfo.balance\n\n        }\n\n        const bridgeAToB = async () => {\n            briding(chainA, form.chainAToBTokenAmount)\n        }\n\n        const bridgeBToA = async () => {\n            briding(chainB, form.chainBToATokenAmount)\n        }\n\n        const briding = async (primaryChain, _amount) => {\n\n            let transactionHash = ''\n            let fullScreenLoading = null\n\n            isOnBriding.value = true\n            fullScreenLoading = ElLoading.service({\n                lock: true,\n                text: 'Loading',\n                background: 'rgba(0, 0, 0, 0.7)',\n            })\n\n            const web3 = Web3Connect.getWeb3()\n\n            const erc20Contract = new web3.eth.Contract(erc20ABI, primaryChain.token.address)\n            const to = BRIDGE_CONTRACT_ADDRESS[primaryChain.chain.chainId]\n            const amount = parseUnits(_amount, primaryChain.token.decimals)\n\n            const tx = erc20Contract.methods.transfer(to, amount)\n            const estimatedGas = await tx.estimateGas({from: account.value.address})\n            const gasPrice = useGasPrice()\n\n            tx.send({\n                from: account.value.address,\n                gas: estimatedGas,\n                gasPrice: gasPrice,\n            })\n            .on('transactionHash', (_transactionHash) => {\n                transactionHash = _transactionHash\n            })\n            .on('receipt', async () => {\n                ElNotification({\n                    customClass: 'top-of-every-thing',\n                    type: 'success',\n                    title: 'Transaction receipt',\n                    dangerouslyUseHTMLString: true,\n                    message: `<a href=\"${viewTransactionOnBlockExplorer(primaryChain.chain, transactionHash)}\" target=\"_blank\">View on Block Explorer: ${transactionHash}</a>`,\n                    duration: 10 * 1000,\n                })\n                \n                setTimeout(async () => {\n                    await fetchAll()\n                    clearForm()\n                    isOnBriding.value = false\n                    fullScreenLoading.close()\n                    ElNotification({\n                        customClass: 'top-of-every-thing',\n                        type: 'success',\n                        title: 'Briding done.',\n                        dangerouslyUseHTMLString: true,\n                        message: `<a href=\"${viewTransactionOnBlockExplorer(primaryChain.chain, transactionHash)}\" target=\"_blank\">View on Block Explorer: ${transactionHash}</a>`,\n                        duration: 10 * 1000,\n                    })\n                }, 10 * 1000)\n            })\n            .on('error', (error) => {\n                console.log('bridge error', error.message)\n                ElNotification({\n                    customClass: 'top-of-every-thing',\n                    type: 'warning',\n                    title: 'Bridge fail',\n                    message: contractErrorExtract(error.message),\n                    duration: 15 * 1000,\n                })\n                isOnBriding.value = false\n                fullScreenLoading.close()\n            }) \n        }\n\n        const viewTransactionOnBlockExplorer = (chain, transactionHash) => {\n            return `${chain.blockExplorerUrl}/tx/${transactionHash}`\n        }\n\n        const clearForm = () => {\n            form.chainAToBTokenAmount = ''\n            form.chainBToATokenAmount = ''\n        }\n\n        const refresh = async () => {\n\n            let fullScreenLoading = null\n\n            isOnBriding.value = true\n            fullScreenLoading = ElLoading.service({\n                lock: true,\n                text: 'Loading',\n                background: 'rgba(0, 0, 0, 0.7)',\n            })\n\n            await fetchAll()\n\n            fullScreenLoading.close()\n        }\n\n        onMounted(() => {\n\n            if(isTestnet) {\n                chainA.token = TOKENS[CHAIN.bnbTestnet.chainId][SELECT_TOKEN]\n                chainA.chain = CHAIN.bnbTestnet\n                chainB.token = TOKENS[CHAIN.sepoliaTestnet.chainId][SELECT_TOKEN]\n                chainB.chain = CHAIN.sepoliaTestnet\n            }\n\n            fetchAll()\n        })\n\n        return {\n            chainA,\n            chainB,\n            tokenBalanceFormat,\n            isTestnet,\n            form,\n            tokenSymbol,\n            FEE,\n            chainAContractUrl,\n            chainBContractUrl,\n            aToBInputError,\n            aToBInputValid,\n            bToAInputError,\n            bToAInputValid,\n            bridgeAToB,\n            bridgeBToA,\n            refresh,\n        }\n    }\n}\n</script>\n","import { infuraKey, bnbTestnetRpcUrl } from '@/constant/config/Env'\n\nexport default {\n    bnbTestnet: {\n        chainId: 97,\n        name: 'BNB Smart Chain Testnet',\n        rpcUrl: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n        currencySymbol: 'tBNB',\n        blockExplorerUrl: 'https://testnet.bscscan.com',\n    },\n    sepoliaTestnet: {\n        chainId: 11155111,\n        name: 'Sepolia test network',\n        rpcUrl: `https://rpc.sepolia.org`,\n        currencySymbol: 'SepoliaETH',\n        blockExplorerUrl: 'https://sepolia.etherscan.io',\n    },\n    ethereumMainnet: {\n        chainId: 1,\n        name: 'Ethereum Mainnet',\n        rpcUrl: `https://ethereum.publicnode.com`,\n        currencySymbol: 'ETH',\n        blockExplorerUrl: 'https://etherscan.io',\n    },\n}","import CHAIN from '@/constant/Chain'\nimport MULTICALL_BNB_TESTNET from '@/constant/abi/bnbTestnet/multicall.json'\nimport MULTICALL_SEPOLIA_TESTNET from '@/constant/abi/sepoliaTestnet/multicall.json'\nimport MULTICALL_ETHEREUM_MAINNET from '@/constant/abi/ethereumMainnet/multicall.json'\nimport { Token } from '@pancakeswap/sdk'\n\nexport const BRIDGE_CONTRACT_ADDRESS = {\n    [CHAIN.bnbTestnet.chainId]: '0x6C3Ea55260B8f7F0a62bE332B952F9233ebbDe3D',\n    [CHAIN.sepoliaTestnet.chainId]: '0xFDD35f0eCF704b7828469A19ffd34912D9e10c62',\n}\n\nexport const MULTICALL_ADDRESS = {\n    [CHAIN.bnbTestnet.chainId]: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\n    [CHAIN.sepoliaTestnet.chainId]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [CHAIN.ethereumMainnet.chainId]: '0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441',\n}\n\nexport const MULTICALL_ABI = {\n    [CHAIN.bnbTestnet.chainId]: MULTICALL_BNB_TESTNET,\n    [CHAIN.sepoliaTestnet.chainId]: MULTICALL_BNB_TESTNET,\n    // [CHAIN.ethereumMainnet.chainId]: MULTICALL_ETHEREUM_MAINNET,\n    [CHAIN.ethereumMainnet.chainId]: MULTICALL_BNB_TESTNET,\n}\n\nexport const RPC_URL = {\n    [CHAIN.bnbTestnet.chainId]: CHAIN.bnbTestnet.rpcUrl,\n    [CHAIN.sepoliaTestnet.chainId]: CHAIN.sepoliaTestnet.rpcUrl,\n    [CHAIN.ethereumMainnet.chainId]: CHAIN.ethereumMainnet.rpcUrl,\n}\n\nexport const TOKENS = {\n    [CHAIN.bnbTestnet.chainId]: {\n        usdt: new Token(\n            CHAIN.bnbTestnet.chainId,\n            '0x9aC9cdD0c5512eFe69e599db74A2148f68e4cAD8',\n            18,\n            'BIRD',\n            'Birdswap Token',\n            'https://www.birdswap.org/',\n        ),\n    },\n    [CHAIN.sepoliaTestnet.chainId]: {\n        usdt: new Token(\n            CHAIN.sepoliaTestnet.chainId,\n            '0x1BfEA78465784C2AB2FD4A93eb7C608D814f9c7f',\n            18,\n            'BIRD',\n            'Birdswap Token',\n            'https://www.birdswap.org/',\n        ),\n    },\n    [CHAIN.ethereumMainnet.chainId]: {\n        usdt: {\n            address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n        },\n    },\n}","import { StaticJsonRpcProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { MULTICALL_ABI, MULTICALL_ADDRESS, RPC_URL } from '@/constant/Bridge'\nimport CHAIN from '@/constant/Chain'\n\nconst getMulticallAbi = (chainId) => {\n    return MULTICALL_ABI[chainId] ? MULTICALL_ABI[chainId] : MULTICALL_ABI[CHAIN.bnbTestnet.chainId]\n}\n\nconst getMulticallAddress = (chainId) => {\n    return MULTICALL_ADDRESS[chainId] ? MULTICALL_ADDRESS[chainId] : MULTICALL_ADDRESS[CHAIN.bnbTestnet.chainId]\n}\n\nconst getRpcProvider = (chainId) => {\n    const rpcUrl = RPC_URL[chainId] ? RPC_URL[chainId] : RPC_URL[CHAIN.bnbTestnet.chainId]\n    const simpleRpcProvider = new StaticJsonRpcProvider(rpcUrl)\n    return simpleRpcProvider\n}\n\nconst getContract = (abi, address, signer, simpleRpcProvider) => {\n    const signerOrProvider = signer ?? simpleRpcProvider\n    return new Contract(address, abi, signerOrProvider)\n}\n\nexport const getMulticallContract = (chainId) => {\n\n    const abi = getMulticallAbi(chainId)\n    const address = getMulticallAddress(chainId)\n    const simpleRpcProvider = getRpcProvider(chainId)\n\n    return getContract(abi, address, null, simpleRpcProvider)\n}","import { Interface } from '@ethersproject/abi'\nimport { getMulticallContract } from '@/state/bridge/Contract'\n\nexport const multicall = async (chainId, abi, calls) => {\n    \n    const multi = getMulticallContract(chainId)\n    const itf = new Interface(abi)\n\n    const calldata = calls.map((call) => ({\n        target: call.address.toLowerCase(),\n        callData: itf.encodeFunctionData(call.name, call.params),\n    }))\n    const { returnData } = await multi.aggregate(calldata)\n\n    const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n    return res\n}","import BigNumber from 'bignumber.js'\nimport { multicall } from '@/state/bridge/Multicall'\nimport erc20ABI from '@/constant/abi/ERC20.json'\n\nexport const getTokenBalance = async (chainId, address, account) => {\n\n    const calls = [\n        {\n            address: address,\n            name: 'balanceOf',\n            params: [account],\n        }\n    ]\n\n    try {\n        const rawTokenBalances = await multicall(chainId, erc20ABI, calls)\n        const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n            return new BigNumber(tokenBalance).toJSON()\n        })\n        return parsedTokenBalances\n    } catch (error) {\n        console.log('state.bridge.getTokenBalance error', error.message)\n        return '0'\n    }   \n}","import { render } from \"./Bridge.vue?vue&type=template&id=09396ddc\"\nimport script from \"./Bridge.vue?vue&type=script&lang=js\"\nexport * from \"./Bridge.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/mana/ethereum/bnb-chain/bird-swap/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}